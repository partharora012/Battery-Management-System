/*BMS code V1.0.txt
BMS code V1.0.txt
Jul 1, 2019
Parth Arora uploaded an item
Text
BMS code V1.0.txt
*/




#include <ModbusRtu.h>
#include <Arduino_FreeRTOS.h>
#include<LiquidCrystal.h>
#include<EEPROM.h>
void TaskBMS( void *pvParameters );
void TaskMODBUS( void *pvParameters );
int address = 0;
const float constant = 0.03748490187;        //0.03606501923;

const int rs = 12, en = 11, d4 = 5, d5 = 4, d6 = 3, d7 = 2;  //LCD pin Defination
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);
const int PIN = 7;

                                                   // data array for modbus network sharing
uint16_t prot_register[30]={0};                        // Declaring an arrray of 16 registers ( note : the size of each register is 16 bits )


float register_array[16] = {0,0,0};                 
float current_hall=0;
float voltage_voldiv = 0;
float load = 0;
float battery_energy = 0 ;
float total_energy=0;
float panel_voltage = 0;
float panel_current= 0;
float panel_energy = 0 ;


Modbus slave(1,1,PIN); // this is slave @1 and RS-232 or USB-FTDI

int counter = 0 ;



void setup() 

{
   //Serial.begin(9600);
  xTaskCreate(
    TaskBMS
    ,  (const portCHAR *)"BMS"   // A name just for humans
    ,  128  // This stack size can be checked & adjusted by reading the Stack Highwater
    ,  NULL
    ,  2  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
    ,  NULL );

  xTaskCreate(
    TaskMODBUS
    ,  (const portCHAR *) "MODBUS"
    ,  128  // Stack size
    ,  NULL
    ,  1  // Priority
    ,  NULL );
 
  
  
}




void loop()
 
{}



void TaskBMS(void *pvParameters)  // This is a task.
{
  (void) pvParameters;

  lcd.begin(16, 2);
  lcd.setCursor(0, 0);
  lcd.print("----M2MLogger---");
  vTaskDelay( 1400 / portTICK_PERIOD_MS );
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("-------BMS------");
  vTaskDelay( 2000 / portTICK_PERIOD_MS );
  lcd.clear();
  EEPROM.put(address,register_array[3]);
 
   for (;;)
    {
      for(int i = 0;i<=4;i++)
  {
  int c=0;
  int c1=0;
  int pc=0;
  current_hall=0;
  voltage_voldiv = 0;
  load = 0;
  panel_voltage=0;
  panel_current=0;
  lcd.clear();


 panel_voltage= analogRead(A3)*constant; // Taking Input from the voltage divider circuit and storing it in the variable 
  register_array[4]= panel_voltage;
  prot_register[4]=panel_voltage*100;               // Saving the value of the voltage in the array register 0
 for(int i=0;i<=15;i++)
 {
  pc = analogRead(A2);
  panel_current =  (pc+panel_current);               // Taking input from the hall sensor and storing it in the variable 
  pc=0;
 }
  panel_current=panel_current/16;
  register_array[5]= 0.0285*(panel_current-494.1) ;            // we need to concider the correction coefficient or multiplying factor   and saving in array register 1 .
  prot_register[5]= (0.0285*(panel_current-494.1))*100 ;        // Printing on the display
  panel_current=0;
  lcd.setCursor(0,0);
  lcd.print("P.V.");
  lcd.setCursor(0,1);
  lcd.print(register_array[4]);                     //Printing on the display
  lcd.setCursor (4,1);
  lcd.print("V");
  lcd.setCursor(10,1);
  lcd.print(register_array[5]);
  lcd.setCursor (14,1);
  lcd.print("A");
  vTaskDelay( 4250 / portTICK_PERIOD_MS );
  lcd.clear();



  load = register_array[5]*panel_voltage;        //We have to multiply  the current sensor reading with a constant for it to display the actual value .
  register_array[6]= load ; 
  prot_register[6]=load*100 ;            // Printing on the display//We are saving the load value to array register 3 
  panel_energy = (load)/200 ;      // Correction factor of 18 " 3600/18 " = value for 18 seconds.
  prot_register[7]=panel_energy*100;            // Printing on the display//We are saving the load value to array register 3 
  lcd.setCursor(0,0);
  lcd.print("P.V.");
  lcd.setCursor(0,1);
  lcd.print(register_array[6]);                //Printing on the display
  lcd.setCursor (4,1);
  lcd.print("W"); 
  lcd.setCursor(10,1);
  lcd.print(panel_energy);
  lcd.setCursor (14,1);
  lcd.print("Wh");
  vTaskDelay( 4250 / portTICK_PERIOD_MS );
  lcd.clear();

 
 if( register_array[1]>=0.1)

{
  voltage_voldiv = analogRead(A0)*constant;              // Taking Input from the voltage divider circuit and storing it in the variable 
  register_array[0]= voltage_voldiv ;               
  prot_register[0]=voltage_voldiv*100;            // Printing on the display// Saving the value of the voltage in the array register 0
  for (i=0;i<=15;i++)
  {c=analogRead(A1);
  current_hall = (c+current_hall);             // Taking input from the hall sensor and storing it in the variable 
  c=0;
  }
  current_hall=current_hall/16;
  register_array[1]=  0.0285*(current_hall-509.2);            
  prot_register[1]= 0.0285*(current_hall-509.2)*100; 
  current_hall=0;
  lcd.setCursor(0,0);
  lcd.print("Battery      (D)");
  lcd.setCursor(0,1);
  lcd.print(register_array[0]);                //Printing on the display
  lcd.setCursor (4,1);
  lcd.print("V");     
  lcd.setCursor(10,1);
  lcd.print(register_array[1]);                // Printing on the display
  lcd.setCursor (14,1);
  lcd.print("A");
   vTaskDelay( 4000 / portTICK_PERIOD_MS );
  lcd.clear();
  
 

  load = register_array[1]*register_array[0];        //We have to multiply  the current sensor reading with a constant for it to display the actual value .
  register_array[2]= load ;                    
  prot_register[2]=load*100;            // Printing on the display//We are saving the load value to array register 3 
   battery_energy = (load)/200 ;      // Correction factor of 18 " 3600/18 " = value for 18 seconds.
  register_array[3] = total_energy - battery_energy ; 
  total_energy=total_energy - battery_energy;
    prot_register[3]=register_array[3]*100;            // Printing on the display
  lcd.setCursor(0,0);
  lcd.print("Battery      (D)");
  lcd.setCursor(0,1);
  lcd.print(register_array[2]);                //Printing on the display
  lcd.setCursor (4,1);
  lcd.print("W"); 
  lcd.setCursor(10,1);
  lcd.print(register_array[3]);                //Printing on the display
  lcd.setCursor (14,1);
  lcd.print("Wh");
  vTaskDelay( 4000 / portTICK_PERIOD_MS );
  lcd.clear();

}

else if( register_array[1]>-0.1||register_array[1]<=0.1)
{
  
   voltage_voldiv = analogRead(A0)*constant;              // Taking Input from the voltage divider circuit and storing it in the variable 
  register_array[0]= voltage_voldiv ;               
  prot_register[0]=voltage_voldiv*100;            // Printing on the display// Saving the value of the voltage in the array register 0
  for (i=0;i<=15;i++)
  {c=analogRead(A1);
  current_hall = (c+current_hall);             // Taking input from the hall sensor and storing it in the variable 
  c=0;
  }
  current_hall=current_hall/16;
  register_array[1]=  0.0285*(current_hall-509.2);            
  prot_register[1]= 0.0285*(current_hall-509.2)*100; 
  current_hall=0;
  lcd.setCursor(0,0);
  lcd.print("Battery         ");
  lcd.setCursor(0,1);
  lcd.print(register_array[0]);                //Printing on the display
  lcd.setCursor (4,1);
  lcd.print("V");     
  lcd.setCursor(10,1);
  lcd.print(register_array[1]);                // Printing on the display
  lcd.setCursor (14,1);
  lcd.print("A");
   vTaskDelay( 4000 / portTICK_PERIOD_MS );
  lcd.clear();
  
 

  load = register_array[1]*register_array[0];        //We have to multiply  the current sensor reading with a constant for it to display the actual value .
  register_array[2]= load ;                    
  prot_register[2]=load*100;            // Printing on the display//We are saving the load value to array register 3 
   battery_energy = (load)/200 ;      // Correction factor of 18 " 3600/18 " = value for 18 seconds.
  register_array[3] = total_energy - battery_energy ; 
  total_energy=total_energy - battery_energy;
    prot_register[3]=register_array[3]*100;            // Printing on the display
  lcd.setCursor(0,0);
  lcd.print("Battery         ");
  lcd.setCursor(0,1);
  lcd.print(register_array[2]);                //Printing on the display
  lcd.setCursor (4,1);
  lcd.print("W"); 
  lcd.setCursor(10,1);
  lcd.print(register_array[3]);                //Printing on the display
  lcd.setCursor (14,1);
  lcd.print("Wh");
  vTaskDelay( 4000 / portTICK_PERIOD_MS );
  lcd.clear();
  
  }
else 

{ 
  voltage_voldiv = analogRead(A0)*constant;              // Taking Input from the voltage divider circuit and storing it in the variable 
  register_array[0]= voltage_voldiv ;
  prot_register[0]= voltage_voldiv*100;            // Printing on the display// Saving the value of the voltage in the array register 0
    for(int j=0;j<=15;j++)
    {
      c1=analogRead(A1);
      current_hall = (c1+current_hall);             // Taking input from the hall sensor and storing it in the variable 
      c1=0;
     }                                                 // Taking input from the hall sensor and storing it in the variable 
  current_hall=current_hall/16;
  register_array[1]=  (0.0285*(current_hall-509.2));            
  prot_register[1]= (0.0285*(current_hall-509.2))*100;           // Printing on the display// we need to concider the correction coefficient or multiplying factor   and saving in array register 1 .
  current_hall=0;
  lcd.setCursor(0,0);
  lcd.print("Battery      (C)");
  lcd.setCursor(0,1);
  lcd.print(register_array[0]);                //Printing on the display
  lcd.setCursor (4,1);
  lcd.print("V");
  lcd.setCursor(10,1);
  lcd.print(register_array[1]);                // Printing on the display
  lcd.setCursor (14,1);
  lcd.print("A");
  vTaskDelay( 4000 / portTICK_PERIOD_MS );
  lcd.clear();

  
 

  
  load = register_array[1]*register_array[0];        //We have to multiply  the current sensor reading with a constant for it to display the actual value .
  register_array[2]= load ;                   
  prot_register[2]=load*100;            // Printing on the display//We are saving the load value to array register 3 
  battery_energy = (load)/200 ;      
  register_array[3] = total_energy + battery_energy ; 
  total_energy=total_energy + battery_energy ; 
  prot_register[3]=register_array[3]*100;            // Printing on the displaylcd.setCursor(0,0);
  lcd.print("Battery      (C)");
  lcd.setCursor(0,1);
  lcd.print(register_array[2]);                //Printing on the display
  lcd.setCursor (4,1);
  lcd.print("W");
  lcd.setCursor(10,1);
  lcd.print(register_array[3]);                //Printing on the display
  lcd.setCursor (14,1);
  lcd.print("Wh");
  vTaskDelay( 4000 / portTICK_PERIOD_MS );
  lcd.clear();

  }
 }
 EEPROM.get(address, register_array[3]);   
    }
}


void TaskMODBUS(void *pvParameters)  // This is a task.
{
  (void) pvParameters;
  
      slave.begin( 9600 ); // baud-rate at 9600
  for (;;)
   {
     slave.poll( prot_register , 16 ); 
   }
}
